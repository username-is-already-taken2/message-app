name: Package and publish

on:
  workflow_dispatch:
  repository_dispatch:
    types: [ trigger-gift-wrap ]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - uses: actions/checkout@v4

    - uses: mondoohq/actions@v11.0.0
      with:
        args: scan local --incognito --policy-bundle ./cnspec-policy.mql.yaml --score-threshold 100

    - name: Download release
      run: gh release download --repo ${PARENT_REPO} --pattern '*inux_*' --pattern 'checksums.txt'
      env:
        PARENT_REPO: ${{ secrets.PARENT_REPO }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify assets
      run: sha256sum -c ./checksums.txt --ignore-missing --strict

    - name: Extract
      run: |
        mkdir -p ./amd64 ./arm64
        tar -zxvf ./*_x86_64.tar.gz -C ./amd64
        tar -zxvf ./*_arm64.tar.gz -C ./arm64

    - name: Build and push (amd64)
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        build-args: TARGET_ARCH=amd64
        push: true
        tags: ghcr.io/username-is-already-taken2/message-app:latest

    - name: Extract image details
      id: metadata
      run: |
        IMAGE_DIGEST=$(echo "${{ steps.build.outputs.digest }}")
        echo "Extracted Image Digest: $IMAGE_DIGEST"

        # Note to future self, echo strips the "'s if you pipe it, set var first
        METADATA=$(echo '${{ steps.build.outputs.metadata }}')

        # echo $METADATA

        IMAGE_NAME=$( echo ${METADATA} | jq -r '.["image.name"]')

        # Output the extracted image name
        echo "Extracted Image Name: $IMAGE_NAME"

        # Store values as outputs for later steps
        echo "image_digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
        echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Create k8s deployment manifest
      run: |
        # Dryrun
        kubectl create deployment message-app --image=${{ steps.metadata.outputs.image_name }}@${{ steps.metadata.outputs.image_digest }} --port=8080 --dry-run=client -o yaml
        # Didn't want an error with the command above to be suppressed with the redirect
        kubectl create deployment message-app --image=${{ steps.metadata.outputs.image_name }}@${{ steps.metadata.outputs.image_digest }} --port=8080 --dry-run=client -o yaml > k8s-deployment.yml

    - uses: actions/upload-artifact@v4
      with:
        name: Deployment manifest
        path: k8s-deployment.yml
